# Train Collision Avoidance System - Backend Reference Guide

## System Overview
This system uses ESP32 devices with GPS and RFID modules to track train positions, identify trains at checkpoints, and predict/prevent collisions. The backend processes this data and provides real-time alerts.

## Core Components

### 1. Data Collection
- ESP32 devices collect GPS coordinates and RFID tags from trains
- Data is sent to the FastAPI backend via HTTP requests
- Each log entry contains: train ID, RFID tag (if detected), GPS location, timestamp, and accuracy

### 2. Route Management
- Routes define a series of checkpoints that trains should follow
- Each checkpoint can have: location coordinates, expected RFID tag, name (if station), and interval (seconds)
- Routes can be assigned to trains and track their progress

### 3. Train Tracking
- Trains are tracked via GPS coordinates and RFID checkpoints
- The system calculates: current position, nearest checkpoint, route progress, and schedule adherence
- Position updates trigger route progress evaluation and collision detection

### 4. Collision Detection
- The system predicts potential collisions by analyzing train positions and trajectories
- Collision risks are evaluated based on proximity, heading, and speed
- Alerts are generated when collision risks are detected

### 5. Alert System
- Alerts are sent to affected trains and a central monitoring station
- System-generated alerts use the SYSTEM_SENDER_ID
- All alerts are also sent to a "guest" account for monitoring

## Key Data Models (as defined in SCHEMA.md)

### trains
- Train identifiers, current status, route assignment
- Has fields: train_id, name, status, current_route_id, last_known_location

### routes
- Series of checkpoints that define a train's journey
- Has fields: route_id, route_name, start_time, assigned_train_id, checkpoints array

### logs
- GPS and RFID data collected from trains
- Has fields: train_id, train_ref, rfid_tag, location, timestamp, accuracy, is_test

### alerts
- Notifications about potential collisions or other issues
- Has fields: sender_ref, recipient_ref, message, location, timestamp

## Core Infrastructure Components

### 1. Application Entry Point (main.py)
- Serves as the entry point for the FastAPI application
- Configures logging and exception handling
- Starts the uvicorn server when run directly
- Imports the app package which contains the actual application logic

### 2. Application Configuration (config.py)
- Centralizes all configuration settings and environment variable handling
- Defines constants for:
  - MongoDB connection settings (MONGODB_URL, DB_NAME)
  - API metadata (API_TITLE, API_VERSION)
  - CORS settings for frontend integration
  - Train status enumerations (IN_SERVICE_RUNNING, MAINTENANCE, etc.)
  - Distance thresholds for proximity calculations (COLLISION_CRITICAL_DISTANCE, ROUTE_DEVIATION_DISTANCE)
  - Time thresholds (SCHEDULE_DELAY, LOG_EXPIRY)
  - System identifiers for alerts (SYSTEM_SENDER_ID, GUEST_RECIPIENT_ID)
  - Monitoring parameters (MONITOR_INTERVAL_SECONDS, MONITORING_ENABLED)
- Provides utility functions:
  - get_current_ist_time(): Standardizes time handling to use IST timezone
  - configure_logging(): Sets up consistent logging across application

### 3. Database Management (database.py)
- Handles MongoDB connection and operations
- Provides:
  - connect_to_mongodb(): Establishes connection on application startup
  - close_mongodb_connection(): Cleanly disconnects on shutdown
  - get_collection(): Retrieves MongoDB collection by name
  - create_indexes(): Sets up database indexes for query optimization
  - get_db_stats(): Returns database metrics
  - PyObjectId: Custom type for handling MongoDB ObjectIDs in Pydantic models
  - safe_db_operation(): Error handling wrapper for database operations

### 4. Application Core (app/main.py)
- Configures the FastAPI application with middleware and routes
- Implements:
  - CORS middleware for cross-origin requests
  - Global exception handling middleware to prevent crashes
  - Request logging middleware for debugging
  - Startup and shutdown event handlers for database connections
  - Background task scheduling for monitoring services
  - Health check endpoints (/status, /version)
  - Router registration for all API endpoints

## Alert System Components

### 1. Alert Schema (schemas/alert.py)
- Defines Pydantic models for validation and serialization
- Models:
  - AlertBase: Common fields for all alerts (sender_ref, recipient_ref, message, location, timestamp)
  - AlertCreate: Used for creating new alerts
  - AlertUpdate: Used for updating existing alerts (all fields optional)
  - AlertInDB: Extends AlertBase with document ID for database records
  - AlertResponse: For API responses
  - AlertSummary: For alert system statistics reports

### 2. Alert Model (models/alert.py)
- Handles database operations for alerts collection
- Methods:
  - get_all(): Fetches paginated list of alerts with optional filtering
  - get_by_id(): Retrieves single alert by ID
  - get_by_recipient(): Finds alerts for a specific recipient
  - get_by_sender(): Finds alerts from a specific sender
  - create(): Inserts new alert with proper validation
  - update(): Modifies existing alert
  - delete(): Removes alert
  - get_recent_alerts(): Retrieves alerts from the last X hours

### 3. Alert Service (services/alert_service.py)
- Handles business logic for alerts
- Key functions:
  - create_system_alert(): Creates an alert from the system to a train
    - Uses SYSTEM_SENDER_ID as sender
    - Automatically duplicates alert to GUEST_RECIPIENT_ID for monitoring
    - Validates recipient exists before sending
  - generate_alert_summary(): Produces statistics on recent alerts

### 4. Alert Routes (routes/alert.py)
- Exposes REST API endpoints for alerts
- Endpoints:
  - GET /alerts/: Retrieves all alerts with pagination
  - GET /alerts/{alert_id}: Gets specific alert by ID
  - GET /alerts/recipient/{recipient_ref}: Gets alerts for a recipient
  - GET /alerts/sender/{sender_ref}: Gets alerts from a sender
  - POST /alerts/: Creates new alert
  - PUT /alerts/{alert_id}: Updates existing alert
  - DELETE /alerts/{alert_id}: Removes alert
- All endpoints use handle_exceptions decorator for consistent error handling

### 5. Alert Integration in Monitoring (tasks/monitor.py)
- Uses AlertService to create alerts for:
  - Collision risks between trains
  - Route deviations
  - Schedule delays
  - System status notifications
- Generates system health reports including alert statistics

### 6. Collision Alert Generation (core/collision.py)
- Specialized alert creation for collision risks
- Creates paired alerts for both trains involved in potential collision
- Uses risk level to determine message urgency and content

## Key Backend Functions

### tracking.py
- get_train_position: Gets the current position of a train
- update_train_progress: Updates a train's progress on its assigned route
- is_train_on_schedule: Determines if a train is running on schedule
- find_nearest_checkpoint: Finds the nearest checkpoint to a train's position
- calculate_collision_risks: Predicts potential collisions between trains

### configuration (config.py)
- Distance thresholds for proximity alerts and route deviation
- Time thresholds for scheduling and prediction windows
- System identifiers for alert generation
- Monitoring intervals and parameters

## Integration Points
- ESP32 hardware sends data to the /logs endpoint
- Frontend queries train positions, routes, and alerts for display
- Background tasks run monitoring for collision detection
- Each train log update triggers route progress evaluation

## Error Handling Guidelines
- GPS data may be inaccurate - use accuracy field to determine reliability
- RFID tags may not be detected at every checkpoint - handle null values
- Network connectivity may be intermittent - implement retry mechanisms
- Time synchronization is critical - standardize on IST timezone
- All database operations should use safe_db_operation wrapper to handle connection issues
- API endpoints should use handle_exceptions decorator for consistent error responses
- Middleware captures unhandled exceptions and returns appropriate HTTP status codes

## Service Startup Flow
1. main.py loads configuration from config.py
2. FastAPI app is initialized with CORS and middleware
3. startup_db_client() establishes MongoDB connection
4. Database indexes are created or verified
5. Background monitoring tasks are started (if enabled)
6. API endpoints become available

## Background Monitoring
- Runs on configurable intervals (MONITOR_INTERVAL_SECONDS)
- Can be enabled/disabled via configuration (MONITORING_ENABLED)
- Tasks:
  - monitor_train_collisions: Detects potential collision risks
  - monitor_train_deviations: Checks for trains deviating from routes
  - monitor_train_schedules: Verifies adherence to schedules
  - generate_system_status_report: Creates system health summary

When modifying code, ensure:
1. Data validation follows schema definitions
2. Functionality maintains integration between components
3. Error handling is consistent and robust
4. Configuration parameters are used consistently
5. Time handling uses standardized IST conversion
6. Database operations are properly wrapped with error handling
7. Log appropriate information for debugging and monitoring