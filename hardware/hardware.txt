#include <MFRC522v2.h>
#include <MFRC522DriverSPI.h>
#include <MFRC522DriverPinSimple.h>
#include <MFRC522Debug.h>
#include <TinyGPS++.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <time.h>

// WiFi credentials
const char* ssid = "iphone";       // Replace with your WiFi SSID
const char* password = "amish@986"; // Replace with your WiFi password

// API endpoint
const char* apiEndpoint = "https://iot-project-c3wb.onrender.com/api/logs/";

// NTP Server settings
const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 19800;  // GMT+5:30 for IST (5*3600 + 30*60)
const int   daylightOffset_sec = 0; // No DST in India

// Train identification (configure as needed)
const char* TRAIN_ID = "205";  // Updated to match schema example
const char* TRAIN_REF = "680296fc63fe290a1ff7e5c4";  // Updated to match schema example
const bool IS_TEST = true;

// Pin definitions
#define RXD2 16
#define TXD2 17
#define GPS_BAUD 9600
#define RFID_SS_PIN 5

// Minimum satellites required for valid GPS data
#define MIN_SATELLITES_FOR_VALID_DATA 3

// RFID setup
MFRC522DriverPinSimple ss_pin(RFID_SS_PIN);
MFRC522DriverSPI driver{ss_pin};
MFRC522 mfrc522{driver};

// GPS setup
TinyGPSPlus gps;
HardwareSerial gpsSerial(2);

// Data storage
struct SensorData {
  String rfidUid = "null";
  float latitude = 0;
  float longitude = 0;
  float speed = 0;
  float altitude = 0;
  int satellites = 0;
  float hdop = 0;
  String dateTime = "";
  String isoDateTimeIST = "";  // ISO8601 format with IST timezone for display
  String isoDateTimeUTC = "";  // ISO8601 format in UTC for API submission
  
  // Validity flags
  bool rfidValid = false;
  bool gpsValid = false;
};

SensorData sensorData;

// Universal timing control
unsigned long lastDataInterval = 0;
const unsigned long DATA_INTERVAL = 6000; // Same interval for printing and API calls

// WiFi reconnection interval
unsigned long lastWifiCheckTime = 0;
const unsigned long WIFI_CHECK_INTERVAL = 30000; // Check WiFi every 30 seconds

// Time synchronization interval (once per hour)
unsigned long lastTimeSyncTime = 0;
const unsigned long TIME_SYNC_INTERVAL = 3600000; // Sync time every hour

void setup() {
  Serial.begin(115200);
  while (!Serial);
  
  // Initialize RFID
  mfrc522.PCD_Init();
  
  // Initialize GPS
  gpsSerial.begin(GPS_BAUD, SERIAL_8N1, RXD2, TXD2);
  
  // Connect to WiFi
  connectToWifi();
  
  // Configure time
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  syncTimeFromNTP();
  
  Serial.println("GPS, RFID Reader, and WiFi initialized");
}

void loop() {
  // Process RFID
  readRfidCard();
  
  // Process GPS
  readGpsData();
  
  // Check WiFi connection periodically
  if (millis() - lastWifiCheckTime >= WIFI_CHECK_INTERVAL) {
    if (WiFi.status() != WL_CONNECTED) {
      connectToWifi();
    }
    lastWifiCheckTime = millis();
  }
  
  // Sync time periodically
  if (millis() - lastTimeSyncTime >= TIME_SYNC_INTERVAL) {
    syncTimeFromNTP();
    lastTimeSyncTime = millis();
  }
  
  // Universal data handling at specified interval
  if (millis() - lastDataInterval >= DATA_INTERVAL) {
    updateTimeData();
    printCombinedData();
    sendDataToAPI();
    
    // Reset RFID data if no new card was detected in this cycle
    if (!sensorData.rfidValid) {
      sensorData.rfidUid = "null";
    }
    sensorData.rfidValid = false;
    
    lastDataInterval = millis();
  }
}

void connectToWifi() {
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  
  // Wait for connection - with timeout
  unsigned long startAttemptTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {
    delay(500);
    Serial.print(".");
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("");
    Serial.print("Connected to WiFi network with IP Address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("");
    Serial.println("Failed to connect to WiFi. Will retry later.");
  }
}

void syncTimeFromNTP() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi not connected. Cannot sync time.");
    return;
  }
  
  Serial.println("Syncing time from NTP server...");
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  
  // Wait for time to be set
  int retry = 0;
  while (time(nullptr) < 1600000000 && retry < 5) {
    Serial.print(".");
    delay(1000);
    retry++;
  }
  
  if (time(nullptr) > 1600000000) {
    Serial.println("Time synchronized successfully");
    updateTimeData();
  } else {
    Serial.println("Failed to get time from NTP server");
  }
}

// Update the updateTimeData() function to provide both UTC and IST timestamps
void updateTimeData() {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
    return;
  }
  
  char dateBuffer[30];
  char isoBufferIST[30];
  char isoBufferUTC[30];
  
  // Format for display: YYYY/MM/DD,HH:MM:SS IST (for local display only)
  strftime(dateBuffer, sizeof(dateBuffer), "%Y/%m/%d,%H:%M:%S IST", &timeinfo);
  sensorData.dateTime = String(dateBuffer);
  
  // Create IST ISO8601 format: YYYY-MM-DDTHH:MM:SS+05:30 (for display purposes)
  strftime(isoBufferIST, sizeof(isoBufferIST), "%Y-%m-%dT%H:%M:%S+05:30", &timeinfo);
  
  // Get UTC time (subtract GMT offset)
  time_t now = time(nullptr);
  time_t utcTime = now - gmtOffset_sec;
  struct tm utcTimeinfo;
  gmtime_r(&utcTime, &utcTimeinfo);
  
  // Create UTC ISO8601 format: YYYY-MM-DDTHH:MM:SSZ (for API submission)
  strftime(isoBufferUTC, sizeof(isoBufferUTC), "%Y-%m-%dT%H:%M:%SZ", &utcTimeinfo);
  
  // Store both formats, but use UTC for API
  sensorData.isoDateTimeIST = String(isoBufferIST);
  sensorData.isoDateTimeUTC = String(isoBufferUTC);
}

void readRfidCard() {
  if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    sensorData.rfidUid = "";
    for (byte i = 0; i < mfrc522.uid.size; i++) {
      if (mfrc522.uid.uidByte[i] < 0x10) {
        sensorData.rfidUid += "0"; 
      }
      sensorData.rfidUid += String(mfrc522.uid.uidByte[i], HEX);
    }
    sensorData.rfidValid = true;
    mfrc522.PICC_HaltA();
    mfrc522.PCD_StopCrypto1();
  }
}

void readGpsData() {
  while (gpsSerial.available() > 0) {
    if (gps.encode(gpsSerial.read())) {
      // Check if we have enough satellites for valid GPS data
      sensorData.satellites = gps.satellites.isValid() ? gps.satellites.value() : 0;
      sensorData.gpsValid = (sensorData.satellites >= MIN_SATELLITES_FOR_VALID_DATA);
      
      // Update location data
      if (gps.location.isValid() && sensorData.gpsValid) {
        sensorData.latitude = gps.location.lat();
        sensorData.longitude = gps.location.lng();
      }
      
      // Update speed data
      if (gps.speed.isValid() && sensorData.gpsValid) {
        sensorData.speed = gps.speed.kmph();
      }
      
      // Update altitude data
      if (gps.altitude.isValid() && sensorData.gpsValid) {
        sensorData.altitude = gps.altitude.meters();
      }
      
      // Update HDOP data
      if (gps.hdop.isValid()) {
        sensorData.hdop = gps.hdop.value() / 100.0;
      }
      
      // Note: We no longer use GPS for time - using NTP instead
    }
  }
}

// Update the printCombinedData function to show both timestamps
void printCombinedData() {
  Serial.println("\n----- COMBINED DATA -----");
  
  // Print RFID data
  Serial.print("RFID Card UID: ");
  Serial.println(sensorData.rfidUid);
  
  // Print GPS data
  Serial.println("GPS Data:");
  Serial.print("  Satellites: "); 
  Serial.println(sensorData.satellites);
  
  // Print GPS quality indicator
  Serial.print("  GPS Fix Quality: ");
  Serial.println(sensorData.gpsValid ? "Valid" : "Invalid");
  
  // Print location data
  Serial.print("  Latitude: ");
  Serial.println(sensorData.gpsValid ? String(sensorData.latitude, 5) : "null");
  
  Serial.print("  Longitude: "); 
  Serial.println(sensorData.gpsValid ? String(sensorData.longitude, 5) : "null");
  
  // Print speed data
  Serial.print("  Speed: ");
  if (sensorData.gpsValid) {
    Serial.print(sensorData.speed);
    Serial.println(" km/h");
  } else {
    Serial.println("null");
  }
  
  // Print altitude data
  Serial.print("  Altitude: ");
  if (sensorData.gpsValid) {
    Serial.print(sensorData.altitude);
    Serial.println(" meters");
  } else {
    Serial.println("null");
  }
  
  // Print HDOP data
  Serial.print("  HDOP: "); 
  Serial.println(gps.hdop.isValid() ? String(sensorData.hdop) : "null");
  
  // Print date/time data
  Serial.print("  Date/Time (IST): ");
  Serial.println(sensorData.dateTime);
  
  Serial.print("  ISO Date/Time (UTC): ");
  Serial.println(sensorData.isoDateTimeUTC);
  
  Serial.print("  ISO Date/Time (IST): ");
  Serial.println(sensorData.isoDateTimeIST);
  
  Serial.println("-------------------------------------------\n");
}

// Update the sendDataToAPI function to use UTC timestamp
void sendDataToAPI() {
  // Only proceed if WiFi is connected
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi not connected. Cannot send data to API.");
    return;
  }
  
  HTTPClient http;
  http.begin(apiEndpoint);
  http.addHeader("Content-Type", "application/json");
  
  // Create JSON payload
  StaticJsonDocument<512> jsonDoc;
  jsonDoc["train_id"] = TRAIN_ID;
  jsonDoc["train_ref"] = TRAIN_REF;
  
  // Use UTC timestamp for API submission to match backend storage format
  jsonDoc["timestamp"] = sensorData.isoDateTimeUTC;
  
  // Handle RFID tag - properly set null in JSON when no tag detected
  if (sensorData.rfidUid != "null") {
    jsonDoc["rfid_tag"] = sensorData.rfidUid;
  } else {
    // This will create a proper JSON null value
    jsonDoc["rfid_tag"] = static_cast<const char*>(NULL);
  }
  
  // Add location as array only if GPS is valid
  if (sensorData.gpsValid) {
    JsonArray locationArray = jsonDoc.createNestedArray("location");
    locationArray.add(sensorData.longitude); // API format is [longitude, latitude]
    locationArray.add(sensorData.latitude);
    
    // Set accuracy based on HDOP
    String accuracy;
    if (sensorData.hdop < 1.0) {
      accuracy = "excellent";
    } else if (sensorData.hdop < 2.0) {
      accuracy = "good";
    } else if (sensorData.hdop < 5.0) {
      accuracy = "moderate";
    } else {
      accuracy = "poor";
    }
    jsonDoc["accuracy"] = accuracy;
  } else {
    // If GPS is not valid, set location to null
    jsonDoc["location"] = static_cast<const char*>(NULL);
    jsonDoc["accuracy"] = static_cast<const char*>(NULL);
  }
  
  jsonDoc["is_test"] = IS_TEST;
  
  // Serialize JSON to string
  String jsonPayload;
  serializeJson(jsonDoc, jsonPayload);
  
  // Send the request
  Serial.println("Sending data to API...");
  Serial.println(jsonPayload);
  
  int httpResponseCode = http.POST(jsonPayload);
  
  if (httpResponseCode > 0) {
    String response = http.getString();
    Serial.println("HTTP Response code: " + String(httpResponseCode));
    Serial.println("Response: " + response);
  } else {
    Serial.print("Error code: ");
    Serial.println(httpResponseCode);
    Serial.println("API request failed");
  }
  
  http.end();
}
